{"version":3,"sources":["Components/Table/TableData/TableData.js","Components/Table/Table.js","Components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["TableData","props","Type","TicketID","Summary","Status","CreatedDate","Table","table","rowData","tableData","length","map","object","key","Dashboard","handleSort","mockData","handleDatesSort","sort","a","b","Date","state","window","addEventListener","this","setState","reduce","columnsSoFar","push","data","mapResponseData","rows","property","concat","newArr","currentobject","index","includes","prevObj","Component","App","routes","path","component","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAceA,EAZG,SAACC,GACjB,OACE,4BACE,4BAAKA,EAAMC,MACX,4BAAKD,EAAME,UACX,4BAAKF,EAAMG,SACX,4BAAKH,EAAMI,QACX,4BAAKJ,EAAMK,eC6BFC,EAnCD,SAACN,GACb,IAAMO,EAAQP,EAAMQ,QAEhBC,EACFF,EAAMG,OAAS,EACXH,EAAMI,KAAI,SAAUC,GAClB,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAOV,SACZD,KAAMW,EAAOX,KACbC,SAAUU,EAAOV,SACjBC,QAASS,EAAOT,QAChBC,OAAQQ,EAAOR,OACfC,YAAaO,EAAOP,iBAI1B,GAEN,OACE,+BACE,+BACE,4BACE,oCACA,wCACA,uCACA,sCACA,4CAEDI,KC2DMK,G,wDAnFb,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAmERe,WAAa,SAACC,GACZ,OAAIA,GACF,EAAKC,gBAAgBD,GACdA,EAASE,MAAK,SAACC,EAAGC,GACvB,OAAO,IAAIC,KAAKD,EAAEf,aAAe,IAAIgB,KAAKF,EAAEd,iBAGzC,IAzEP,EAAKiB,MAAQ,CACXd,QAAS,MAHM,E,gEAQjBe,OAAOC,iBAAiB,OAAQC,KAAKV,WAAWC,IAChD,IAAMR,EAAUiB,KAAKjB,UACrBiB,KAAKC,SAAS,CAAElB,c,wCAKhB,OAAIQ,EACaA,EAASW,QACtB,SAACC,EAAD,GAAqE,IAApD3B,EAAmD,EAAnDA,KAAMC,EAA6C,EAA7CA,SAAUC,EAAmC,EAAnCA,QAASC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAShD,OARKuB,EAAa3B,KAAO2B,EAAa3B,GAAQ,IAC9C2B,EAAa3B,GAAM4B,KAAK,CACtB5B,OACAC,WACAC,UACAC,SACAC,gBAEKuB,IAET,IAIG,K,gCAKP,IAAME,EAAOL,KAAKM,kBACdC,EAAO,GACX,GAAIF,EAAM,CACR,IAAK,IAAMG,KAAYH,EACrBE,EAAOA,EAAKE,OAAOJ,EAAKG,IAE1B,OAAOD,EAET,OAAO,O,sCAIOhB,GACd,GAAIA,EAAU,CACZ,IAAImB,EAAS,GAEbnB,EAASL,KAAI,SAAUyB,EAAeC,GACpC,GAAIF,EAAOG,SAASF,EAAc/B,aAEhC,OADUW,EAASqB,EAAQ,GACpBrB,EAASE,MAAK,SAACkB,EAAeG,GACnC,OAAOH,EAAclC,SAAWqC,EAAQrC,YAG1CiC,EAAON,KAAKO,EAAc/B,gBAIhC,MAAO,K,+BAeP,OAAO,kBAAC,EAAD,CAAOG,QAASiB,KAAKH,MAAMd,QAAUiB,KAAKH,MAAMd,QAAU,S,GAhF7CgC,cCiBTC,MAlBf,WACE,IAAIC,EACF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW9B,MAIjC,OACE,yBAAK+B,UAAU,OACb,4BAAQA,UAAU,cAChB,yDACCH,KCNWI,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.77d86d8f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TableData = (props) => {\r\n  return (\r\n    <tr>\r\n      <td>{props.Type}</td>\r\n      <td>{props.TicketID}</td>\r\n      <td>{props.Summary}</td>\r\n      <td>{props.Status}</td>\r\n      <td>{props.CreatedDate}</td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default TableData;\r\n","import React from \"react\";\r\nimport TableData from \"./TableData/TableData\";\r\n\r\nconst Table = (props) => {\r\n  const table = props.rowData;\r\n\r\n  let tableData =\r\n    table.length > 0\r\n      ? table.map(function (object) {\r\n          return (\r\n            <TableData\r\n              key={object.TicketID}\r\n              Type={object.Type}\r\n              TicketID={object.TicketID}\r\n              Summary={object.Summary}\r\n              Status={object.Status}\r\n              CreatedDate={object.CreatedDate}\r\n            />\r\n          );\r\n        })\r\n      : \"\";\r\n\r\n  return (\r\n    <table>\r\n      <tbody>\r\n        <tr>\r\n          <th>Type</th>\r\n          <th>TicketID</th>\r\n          <th>Summary</th>\r\n          <th>Status</th>\r\n          <th>CreatedDate</th>\r\n        </tr>\r\n        {tableData}\r\n      </tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport mockData from \"../API/mockData\";\r\nimport Table from \"./Table/Table\";\r\nimport \"../App.css\";\r\n\r\n\r\n//Dashboard Component is called from APP.js when path is equal to '/' through routing\r\nclass Dashboard extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      rowData: null,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"load\", this.handleSort(mockData));\r\n    const rowData = this.rowData();\r\n    this.setState({ rowData });\r\n  }\r\n\r\n  //Grouping the columns\r\n  mapResponseData() {\r\n    if (mockData) {\r\n      const result = mockData.reduce(\r\n        (columnsSoFar, { Type, TicketID, Summary, Status, CreatedDate }) => {\r\n          if (!columnsSoFar[Type]) columnsSoFar[Type] = [];\r\n          columnsSoFar[Type].push({\r\n            Type,\r\n            TicketID,\r\n            Summary,\r\n            Status,\r\n            CreatedDate,\r\n          });\r\n          return columnsSoFar;\r\n        },\r\n        []\r\n      );\r\n      return result;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // Getting Row data from grouping\r\n  rowData() {\r\n    const data = this.mapResponseData();\r\n    let rows = [];\r\n    if (data) {\r\n      for (const property in data) {\r\n        rows = rows.concat(data[property]);\r\n      }\r\n      return rows;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Handling of sort dates, sort dates by TicketID when two dates are same\r\n  handleDatesSort(mockData) {\r\n    if (mockData) {\r\n      let newArr = [];\r\n      let prevObj;\r\n      mockData.map(function (currentobject, index) {\r\n        if (newArr.includes(currentobject.CreatedDate)) {\r\n          prevObj = mockData[index - 1];\r\n          return mockData.sort((currentobject, prevObj) => {\r\n            return currentobject.TicketID - prevObj.TicketID;\r\n          });\r\n        } else {\r\n          newArr.push(currentobject.CreatedDate);\r\n        }\r\n      });\r\n    }\r\n    return [];\r\n  }\r\n\r\n  // Handling sort in DD/MMM/YY Format\r\n  handleSort = (mockData) => {\r\n    if (mockData) {\r\n      this.handleDatesSort(mockData);\r\n      return mockData.sort((a, b) => {\r\n        return new Date(b.CreatedDate) - new Date(a.CreatedDate);\r\n      });\r\n    }\r\n    return [];\r\n  };\r\n\r\n  render() {\r\n    return <Table rowData={this.state.rowData ? this.state.rowData : \"\"} />;\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Dashboard from \"./Components/Dashboard\";\n\n//Main Component\n\nfunction App() {\n  var routes = (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n      </Switch>\n    </Router>\n  );\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Welcome to JIRA Dashboard</h1>\n        {routes}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}